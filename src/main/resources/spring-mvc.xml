<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd">

    <description>Spring MVC Configuration</description>

    <!-- 加载配置属性文件 -->
	<context:property-placeholder ignore-unresolvable="true" location="classpath:jeesite.properties" />

	<!-- 使用Annotation自动注册Bean,只扫描@Controller -->
	<context:component-scan base-package="com.thinkgem.jeesite" use-default-filters="false"><!-- base-package 如果多个，用“,”分隔 -->
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>

	<!-- 默认的注解映射的支持，org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -->
	<mvc:annotation-driven content-negotiation-manager="contentNegotiationManager">
		<mvc:message-converters register-defaults="true">
			<!-- 将StringHttpMessageConverter的默认编码设为UTF-8 -->
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
		    	<constructor-arg value="UTF-8" />
			</bean>
			<!-- 将Jackson2HttpMessageConverter的默认格式化输出为false -->
			<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="supportedMediaTypes">
                	<list><value>application/json;charset=UTF-8</value></list>
                </property>
                <property name="prettyPrint" value="false"/>
                <property name="objectMapper">
                    <bean class="com.thinkgem.jeesite.common.mapper.JsonMapper"></bean>
                </property>
            </bean>
            <!-- 使用XML格式输出数据 -->
            <bean class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">
		        <constructor-arg>
		        	<bean class="org.springframework.oxm.xstream.XStreamMarshaller">
				        <property name="streamDriver">
				            <bean class="com.thoughtworks.xstream.io.xml.StaxDriver"/>
				        </property>
				        <property name="annotatedClasses">
				            <list>
				                <value>com.thinkgem.jeesite.common.persistence.BaseEntity</value>
				                <value>com.thinkgem.jeesite.common.supcan.treelist.TreeList</value>
				                <value>com.thinkgem.jeesite.common.supcan.treelist.cols.Col</value>
				                <value>com.thinkgem.jeesite.common.supcan.treelist.cols.Group</value>
				            </list>
				        </property>
				    </bean>
		        </constructor-arg>
		        <property name="supportedMediaTypes" value="application/xml"></property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>

    <!-- REST中根据URL后缀自动判定Content-Type及相应的View -->
	<bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
	    <property name="mediaTypes" >
	        <map>
                <entry key="xml" value="application/xml"/>
                <entry key="json" value="application/json"/>
            </map>
	    </property>
        <property name="ignoreAcceptHeader" value="true"/>
        <property name="favorPathExtension" value="true"/>
	</bean>
	<!--这里之前只有一个jsp视图解析器，解析那些jsp页面是没有问题的
		现在你把页面换成了html页面，就少了视图解析器，所以会报404，
		后来又加上了解析器，由于你没有导入人家的jar包，所以配置文件无法读取你的VelocityViewResolver
		所以就需要加上他的依赖，maven项目，直接修改pom.xml就可以了
		明白？OK但是你刚才加了依赖，也要加上版本号？是啊，版本控制啊，方便管理jar包的版本，一定要加？
		这个不加也行，但是一般开发都会加上，方便项目的后期维护，嗯嗯，好像你刚才没有加上的时候，加依赖不成功，但是加上了就成功了，
		为什么呢${velocity-version}你的这个是没有定义的，肯定会报错的，如果你把velocity-version换成1.7，也是对的，明白？OK，其实就是就是赋值？
		就是指定版本？是的，你看那个pom文件中，就刚刚那些东西，就是方便你以后去改jar报的版本的，你加上了就不需要去下边找了，直接在上边改就可以哦，明白
		还有什么问题？，暂时没有OK，你写吧

	-->
	<!-- 定义视图文件解析 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="${web.view.prefix}"/>
		<property name="suffix" value="${web.view.suffix}"/>
	</bean>

	<!-- Velocity视图解析器    默认视图  -->
	<bean id="velocityViewResolver" class="org.springframework.web.servlet.view.velocity.VelocityViewResolver">
		<property name="contentType" value="text/html;charset=UTF-8"/>
		<property name="viewNames" value="*.html"/>
		<property name="suffix" value=""/>
		<property name="dateToolAttribute" value="date"/>
		<property name="numberToolAttribute" value="number"/>
		<property name="toolboxConfigLocation" value="/WEB-INF/velocity-toolbox.xml"/>
		<!--是否使用spring对宏定义的支持-->
		<property name="exposeRequestAttributes" value="true"/>
		<property name="requestContextAttribute" value="rc"/>
		<property name="order" value="0"/>
	</bean>

	<bean id="velocityConfigurer" class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
		<property name="resourceLoaderPath" value="/WEB-INF/views/"/>
		<property name="velocityProperties">
			<props>
				<prop key="input.encoding">UTF-8</prop>
				<prop key="output.encoding">UTF-8</prop>
				<prop key="contentType">text/html;charset=UTF-8</prop>
			</props>
		</property>
	</bean>






	<!-- 对静态资源文件的访问， 将无法mapping到Controller的path交给default servlet handler处理 -->
	<mvc:default-servlet-handler />

	<!-- 静态资源映射 -->
    <mvc:resources mapping="/static/**" location="/static/" cache-period="31536000"/>

	<!-- 定义无Controller的path<->view直接映射 -->
	<mvc:view-controller path="/" view-name="redirect:${web.view.index}"/>

	<!-- 拦截器配置，拦截顺序：先执行后定义的，排在第一位的最后执行。-->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="${adminPath}/**" />
			<mvc:exclude-mapping path="${adminPath}/"/>
			<mvc:exclude-mapping path="${adminPath}/login"/>
			<mvc:exclude-mapping path="${adminPath}/sys/menu/tree"/>
			<mvc:exclude-mapping path="${adminPath}/sys/menu/treeData"/>
			<mvc:exclude-mapping path="${adminPath}/oa/oaNotify/self/count"/>
			<mvc:exclude-mapping path="${adminPath}/youhuicode/userInfo/search"/>
			<mvc:exclude-mapping path="${adminPath}/youhuicode/userInfo/code1"/>
			<mvc:exclude-mapping path="/a/youhuicode/userInfo/getduihuan"/>
			<mvc:exclude-mapping path="/a/youhuicode/userInfo/getshow"/>

			<bean class="com.thinkgem.jeesite.modules.sys.interceptor.LogInterceptor" />
		</mvc:interceptor>

		<mvc:interceptor>
			<mvc:mapping path="/a/youhuicode/userInfo/*"/>

			<bean class="com.thinkgem.jeesite.modules.youhuicode.interceptor.UserInterceptor"></bean>
		</mvc:interceptor>


<!--		<mvc:interceptor>-->
<!--			<mvc:mapping path="/jeesite_war/toencryptByTime*"/>-->

<!--		&lt;!&ndash;	<mvc:mapping path="/jeesite_war/getMessage"/>-->
<!--&ndash;&gt;-->
<!--			<bean class="com.thinkgem.jeesite.modules.zhifubao.interceptor.AuthenticationInterceptor"></bean>-->
<!--		</mvc:interceptor>-->
		<!-- 手机视图拦截器 -->
		<!--<mvc:interceptor>
			<mvc:mapping path="/**" />
			<mvc:exclude-mapping path="${adminPath}/youhuicode/userInfo/search"/>
			<mvc:exclude-mapping path="${adminPath}/youhuicode/userInfo/code1"/>
			<bean class="com.thinkgem.jeesite.modules.sys.interceptor.MobileInterceptor" />
		</mvc:interceptor>-->
	</mvc:interceptors>

	<!-- 支持Shiro对Controller的方法级AOP安全控制 begin-->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>

	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="org.apache.shiro.authz.UnauthorizedException">error/403</prop>
				<prop key="java.lang.Throwable">error/500</prop>
			</props>
			</property>
	</bean>
	<!-- 支持Shiro对Controller的方法级AOP安全控制 end -->

	<!-- 上传文件拦截，设置最大上传文件大小   10M=10*1024*1024(B)=10485760 bytes -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="${web.maxUploadSize}" />
	</bean>

</beans>
